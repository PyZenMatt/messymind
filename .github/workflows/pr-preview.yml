name: PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install bundler and dependencies
        run: |
          gem install bundler --conservative
          bundle config set path "vendor/bundle"
          bundle install --jobs 4 --retry 3

      - name: Configure preview variables
        id: vars
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PREVIEW_PATH="previews/pr-${PR_NUMBER}"
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "PREVIEW_PATH=${PREVIEW_PATH}" >> $GITHUB_OUTPUT

      - name: Override published:false for preview
        run: |
          # Replace `published: false` with `published: true` in posts, drafts and pages for preview builds
          # Use null-separated file list and a safe while-read loop to handle filenames with spaces/quotes/unicode
          set -uo pipefail
          git ls-files -z "_posts/**" "_drafts/**" "**/*.md" "**/*.markdown" | \
<<<<<<< HEAD
          { IFS= read -r -d '' || true; }
          # Iterate safely
          git ls-files -z "_posts/**" "_drafts/**" "**/*.md" "**/*.markdown" | \
          while IFS= read -r -d '' file; do
            if [ -f "$file" ]; then
              # Use perl inplace edit; pattern matches published: false (case-insensitive) at line start
=======
          while IFS= read -r -d '' file; do
            if [ -f "$file" ]; then
>>>>>>> 1571dab (ci: restore pr-preview workflow with robust deploy)
              perl -0777 -pe 's/^([ \t]*published:\s*)false$/\1true/gim' -i -- "$file" || true
            fi
          done

      - name: Build Jekyll preview
        env:
          JEKYLL_ENV: production
        run: |
          # Build with drafts and future posts enabled and set baseurl to the preview path
          PR_BASE="/${{ steps.vars.outputs.PREVIEW_PATH }}"
          echo "Building with baseurl=${PR_BASE}"
          bundle exec jekyll build --drafts --future --baseurl "${PR_BASE}" --config _config.yml
<<<<<<< HEAD
          # Ensure site is built into _site
=======
>>>>>>> 1571dab (ci: restore pr-preview workflow with robust deploy)

      - name: Cleanup Windows alternate data streams from build
        run: |
          # Remove any files that include the Windows ADS suffix pattern ":Zone.Identifier" which breaks uploads
          find _site -type f -name '*:Zone.Identifier' -print0 | xargs -0 --no-run-if-empty rm -f || true
          # Also remove such files from the source assets (in case they were checked into the repo)
          find . -type f -name '*:Zone.Identifier' -print0 | xargs -0 --no-run-if-empty rm -f || true

      - name: Prepare deployment branch
        run: |
<<<<<<< HEAD
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin gh-pages || true
          git checkout --orphan gh-pages || git checkout gh-pages
          git rm -rf . || true
          # create a minimal index.html to preserve branch if needed
          echo "" > .gitkeep

      - name: Copy preview to gh-pages subtree
        run: |
          PR_DIR=${{ steps.vars.outputs.PREVIEW_PATH }}
          mkdir -p "$PR_DIR"
          # Copy built site into previews/pr-<num>/ directory, excluding files with colon characters (e.g. Zone.Identifier)
          rsync -a --exclude='*:*' _site/ "$PR_DIR/"
          # Ensure we don't try to add any files with invalid characters
          git add --all || true
          git commit -m "Deploy PR #${{ steps.vars.outputs.PR_NUMBER }} preview" || echo "No changes to commit"
          git push origin HEAD:gh-pages
=======
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Fetch latest gh-pages if it exists
          git fetch origin gh-pages || true

          if git rev-parse --verify origin/gh-pages >/dev/null 2>&1; then
            # If gh-pages exists remotely, check it out (create local tracking branch if needed)
            if git show-ref --verify --quiet refs/heads/gh-pages; then
              git checkout gh-pages
            else
              git checkout -b gh-pages origin/gh-pages
            fi
            # Reset working tree to remote tip (keep local working copy but update index)
            git reset --mixed origin/gh-pages
          else
            # No remote gh-pages yet: create orphan branch
            git checkout --orphan gh-pages
            git rm -rf . || true
            # create a minimal placeholder so branch isn't empty
            echo "" > .gitkeep
            git add .gitkeep
            git commit -m "chore: create gh-pages branch" || true
            git push origin gh-pages || true
          fi

      - name: Copy preview to gh-pages subtree
        run: |
          set -euo pipefail
          PR_DIR=${{ steps.vars.outputs.PREVIEW_PATH }}
          mkdir -p "$PR_DIR"
          # Copy built site into previews/pr-<num>/ directory, excluding files with colon characters (e.g. Zone.Identifier)
          rsync -a --delete --exclude='*:*' _site/ "$PR_DIR/"

          # Add and commit only if there are changes
          git add -A -- "$PR_DIR"
          if git diff --cached --quiet; then
            echo "No changes to deploy for PR #${{ steps.vars.outputs.PR_NUMBER }}"
          else
            git commit -m "Deploy PR #${{ steps.vars.outputs.PR_NUMBER }} preview"
          fi

          # Ensure we're up to date with remote and attempt to push; if remote advanced, rebase and retry
          git fetch origin gh-pages || true
          if git rev-parse --verify origin/gh-pages >/dev/null 2>&1; then
            # Rebase local commits on top of remote to avoid non-fast-forward
            git rebase --rebase-merges origin/gh-pages || true
          fi

          if ! git push origin gh-pages; then
            echo "Push rejected; attempting to pull --rebase and push again"
            git pull --rebase origin gh-pages || true
            git push origin gh-pages
          fi
>>>>>>> 1571dab (ci: restore pr-preview workflow with robust deploy)

      - name: Post or update PR comment with preview URL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNum = pr;
            const previewPath = `previews/pr-${prNum}/`;
            const previewUrl = `https://${owner}.github.io/${repo}/${previewPath}`;

            // Search for an existing bot comment
            const { data: comments } = await github.issues.listComments({ owner, repo, issue_number: prNum });
            const botComment = comments.find(c => c.user && c.user.type === 'Bot' && c.body && c.body.includes('Preview URL for this PR'));

            const body = `Preview URL for this PR: ${previewUrl}\n\nBuilt with drafts + future posts. Updated on commit: ${process.env.GITHUB_SHA}`;

            if (botComment) {
              await github.issues.updateComment({ owner, repo, comment_id: botComment.id, body });
            } else {
              await github.issues.createComment({ owner, repo, issue_number: prNum, body });
            }
